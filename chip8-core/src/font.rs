use crate::{Address, Memory};

pub(crate) fn load_fontset_into_memory(memory: &mut Memory) {
    memory[usize::from(FONT_ADDR)..(usize::from(FONT_ADDR) + FONTSET.len())]
        .copy_from_slice(&FONTSET);
}

/// Get address of a font character in memory.
pub(crate) fn get_font_addr(font_char: u8) -> Address {
    FONT_ADDR + u16::from(font_char) * u16::from(BYTES_PER_FONT_CHAR)
}

const BYTES_PER_FONT_CHAR: u8 = 5;

/// Each char from 0x0 to 0xF is represented by a bitmap made up of 5 bytes,
/// where the top 4 bits of each byte represent one row of the char.
const FONTSET: [u8; 16 * (BYTES_PER_FONT_CHAR as usize)] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];

/// The address in memory where the fontset is loaded.
const FONT_ADDR: Address = 0x050;
